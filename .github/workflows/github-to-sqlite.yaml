name: collect-github-data

on:
  workflow_dispatch:
  push:
    branches:
      - main
  schedule:
    - cron: '0 0 * * *'

jobs:
  scheduled:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    steps:
      - uses: actions/checkout@v2
        name: Check out repo
      - name: Checkout xarray-db
        uses: actions/checkout@v2
        with:
          repository: andersy005/xarray-db
          path: xarray-db
          token: ${{ secrets.GH_TOKEN }}
      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: '16'
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt

      - name: Create auth.json
        env:
          GITHUB_ACCESS_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          echo "{\"github_personal_token\": \"$GITHUB_ACCESS_TOKEN\"}" > auth.json

      - name: Download previous database unless REBUILD in commit message
        if: |-
          !contains(github.event.head_commit.message, 'REBUILD')
        run: |
          curl --fail -o xarray.db https://pydata-datasette.herokuapp.com/xarray.db
        continue-on-error: true

      - name: Collect data via GitHub API
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          prefect run -p scrape_pulls_and_issues.py
          csvs-to-sqlite ./data/open_pulls_and_issues.csv open_pulls_and_issues.db
          sqlite-utils analyze-tables open_pulls_and_issues.db --save

      - name: Fetch data
        run: |
          # Scrape dependents
          github-to-sqlite scrape-dependents xarray.db pydata/xarray -v
          # Fetch stargazers
          github-to-sqlite stargazers xarray.db pydata/xarray
          # Fetch contributors
          github-to-sqlite contributors xarray.db pydata/xarray
          # Fetch pull-requests
          github-to-sqlite pull-requests xarray.db pydata/xarray
          # Fetch issues
          github-to-sqlite issues xarray.db pydata/xarray
          sqlite-utils tables --counts xarray.db
          # Fetch releases
          github-to-sqlite releases xarray.db pydata/xarray
          # Fetch tags
          github-to-sqlite tags xarray.db pydata/xarray
          # Rebuild FTS tables
          sqlite-utils rebuild-fts xarray.db
          # Populate _analyze_tables_ table
          sqlite-utils analyze-tables xarray.db --save

      - name: Save xarray.db to andersy005/xarray-db
        if: "!contains(github.event.head_commit.message, '[skip-publish]')"
        run: |
          cd xarray-db
          cp ../xarray.db .
          cp ../open_pulls_and_issues.db .
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
          git add xarray.db open_pulls_and_issues.db
          git commit --amend --no-edit
          git push --force

      - uses: actions/upload-artifact@v2
        if: "!contains(github.event.head_commit.message, '[skip-publish]')"
        with:
          path: xarray.db
          retention-days: 2

      - uses: actions/upload-artifact@v2
        if: "!contains(github.event.head_commit.message, '[skip-publish]')"
        with:
          path: open_pulls_and_issues.db
          retention-days: 2

      - name: Deploy to Heroku
        if: "!contains(github.event.head_commit.message, '[skip-publish]')"
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |-
          export LATEST_DATASETTE=`curl -s "https://api.github.com/repos/simonw/datasette/commits/main" | jq -r .sha`
          npm install -g heroku
          heroku plugins:install heroku-builds
          datasette publish heroku xarray.db open_pulls_and_issues.db -n pydata-datasette \
            --extra-options='--setting max_returned_rows 10000' \
            --install=datasette-vega \
            --install=datasette-jellyfish \
            --install=datasette-graphql \
            --install='datasette-copyable>=0.2' \
            --version-note=$LATEST_DATASETTE \
            --branch=$LATEST_DATASETTE
