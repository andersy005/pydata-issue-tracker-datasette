name: Build and deploy

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  scheduled:
    if: "!contains(github.event.head_commit.message, '[skip-ci]')"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        name: Check out repo
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: pip
          cache-dependency-path: requirements.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt

      - name: Create auth.json
        env:
          GITHUB_ACCESS_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          echo "{\"github_personal_token\": \"$GITHUB_ACCESS_TOKEN\"}" > auth.json
      - name: Fetch previous copy of database
        if: |-
          !contains(github.event.head_commit.message, 'REFRESH_DB')
        run: |-
          # So we can keep track of when we first saw each dependent repo
          wget https://xarray-datasette.fly.dev/github.db
      - name: Fetch the repos
        run: |-
          github-to-sqlite repos github.db --repo pydata/xarray
          sqlite-utils tables --counts github.db

      - name: Fetch releases, commits, issues, contributors
        run: |-
          sqlite-utils github.db "select full_name from repos where owner = 1284191" \
            --csv --no-headers | while read repo; do
            github-to-sqlite releases \
                github.db "$(echo "$repo" | tr -d '\r')"
            sleep 20
            github-to-sqlite commits \
                github.db "$(echo "$repo" | tr -d '\r')"
            sleep 20
            github-to-sqlite tags \
                github.db "$(echo "$repo" | tr -d '\r')"
            sleep 20
            github-to-sqlite contributors \
                github.db "$(echo "$repo" | tr -d '\r')"
            sleep 20
            github-to-sqlite issues \
                github.db "$(echo "$repo" | tr -d '\r')"
            sleep 20
            github-to-sqlite pull-requests \
                github.db "$(echo "$repo" | tr -d '\r')"
            sleep 20
            github-to-sqlite issue-comments \
                github.db "$(echo "$repo" | tr -d '\r')"
            sleep 20
            github-to-sqlite stargazers \
                github.db "$(echo "$repo" | tr -d '\r')"
            sleep 20

          done

          # Scrape dependents
          github-to-sqlite scrape-dependents github.db pydata/xarray -v
          sqlite-utils tables --counts github.db
          # Delete email addresses from raw_authors
          sqlite-utils github.db "update raw_authors set email = ''"
          # Fetch emojis
          github-to-sqlite emojis github.db --fetch
          # Rebuild FTS tables
          sqlite-utils rebuild-fts github.db
          # Populate _analyze_tables_ table
          sqlite-utils analyze-tables github.db --save
      - uses: actions/upload-artifact@v3
        with:
          path: github.db

      - name: Install flyctl
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Deploy to fly.io
        if: "!contains(github.event.head_commit.message, '[skip-publish]')"
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |-
          #export LATEST_DATASETTE=`curl -s -H "Authorization: token $GITHUB_TOKEN" "https://api.github.com/repos/simonw/datasette/commits/main" | jq -r .sha`
          export LATEST_DATASETTE=0.64.6
          datasette install datasette-publish-fly
          datasette publish fly github.db --app xarray-datasette \
            --extra-options='--setting max_returned_rows 10000' \
            -m metadata.json \
            --service github-to-sqlite \
            --install=datasette-search-all>=0.3 \
            --install=datasette-render-markdown>=1.1.2 \
            --install=datasette-pretty-json>=0.2.2 \
            --install=datasette-json-html \
            --install=datasette-vega \
            --install=datasette-render-images \
            --install=datasette-graphql \
            --install=datasette-atom \
            --version-note=$LATEST_DATASETTE \
            --branch=$LATEST_DATASETTE
